/**************************************************/
/*                                                */
/*  File:        README                           */
/*  Description: The SWitches platform evolution  */
/*                                                */
/*  Author:      Andreas I. Diavastos             */
/*  Contact:     diavastos@cs.ucy.ac.cy           */
/*  Last Update: 09-02-2016                       */
/*                                                */
/**************************************************/


Versions:
==========================


[*] Version 0.1:
    -> Correct folder is v0.1-C11 -- based on C11 language
    -> OpenMP v4.5 token recognition
    -> OpenMP v4.5 bison grammar
    -> Recognizes all OpenMP constructs and directives in a C program
       and prints a notification string in the place of each directive
    -> Multiple input files support
    

[*] Version 0.2:
    -> Create output files for a SWitches program
    -> Graph creation
    -> Parallel Function kernel assignemnt
    -> Scheduling Policies:
         - Round-robin  (Assign cores to tasks in a Round-Robin scheme)
    -> Create Dependencies / SWitches of all tasks
    -> Transitive Reduction on Dependencies
    -> Implementation of __sw_global__ keyword
    -> Implemented & Tested Directives (parallel, sections, section, task, for,
       parallel for, single, master)


[*] Version 0.3:
    -> Implementation of Reduction
    -> Implementation of Datalists types of variables


[*] Version 0.4:
    -> Created Virtual Thread ID(vTid) for assigning chunks of loop iterations to
       threads correctly.
    -> Optimized Switching __ON process: Removed if (tid == KERNEL_*)... & use
       __sw_Task[vTid] == __ON
    -> Cross-loop Iteration dependencies


[***] RELEASE Version 1.0:
    -> Added warning & error messages for correct programming
    -> Added Thread Affinity -- pinning of pthreads to cores
    -> Changed IF() statement for checking switches and kernels with SWITCH() 


[*] Version 1.1:
    -> Assignment Policies:
         - none    (OS decides)
         - compact (pack h-threads first and then cores)
         - stack   (fill cores first and then h-threads core by core)
         - hybrid  (fill cores first and then concsecutive h-threads of cores)
         - random  (time-based rand function to produce a random affinity policy
                    at runtime for each core seperately -- different tasks may
                    go to the same core)

    -> Scheduling Policies:
         - random    (time-based rand function to produce a random scheduling
                      -- best used with affinity [compact])

[*] Version 1.2 (NOT FINISHED):
    -> Systems support:
         - scc     (support for the Intel Single-chip Cloud Computer Processor)

[*] Version 1.1.1:
    -> BUG FIX: Fixed bug with multiple cross-loop consumers
    -> BUG FIX: Solved the cross-loop bug when loops start at different starting iterations

[*] Version 1.3:
    -> Implement taskloop directive with these clauses:
        - num_thread
        - reduction
        - depend
        - schedule (policies: static, cross)
    -> Update private clause to initialize private variables with 0
    -> Update firstprivate clause to initialize with the global value of the variable
    -> Update how a thread knows all its task have complete (tasksCompletedCount)

[*] Version 1.4:
    -> Updated 'stack' assignment policy to 'scatter'
    -> Scheduling Policy:
        - file <input>: Take as input (text file) the scheduling policy produced by the GA component
    -> Implementation of the NSGA component that produces scheduling policies
    -> Implementation of scripts that run the entire NSGA procedure
    -> Add SW Round-Robin scheduling into the GA initial population
    -> Make initial population to utilization all resources






